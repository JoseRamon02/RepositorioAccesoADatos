package Controlador;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

import Vista.GamePanel;

/**
 * Clase que representa al jugador en el juego.
 */
public class Player {

	// check for firing bullets
    private boolean firing;

    // check for directions set
    private boolean left;
    private boolean right;
    private boolean up;
    private boolean down;

    // drawing coordinates
    private int x;
    private int y;

    // change in position
    private int dx;
    private int dy;

    // size
    private int r;

    // lives
    private int lives;

    // speed (in pixels)
    private int speed;

    // Score
    private int score;

    // Fire
    private long firingTimer;
    private int firingDelay;

    // Recover
    private long recoveryTimer;
    private boolean recovering;
    private long switchTimer = 0;

    // PowerUp System
    private int powerLevel;
    private int power;
    private int[] requiredPower = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };

    // dead
    private boolean dead;
    private BufferedImage playerImage;
    private BufferedImage playerImage2;

    /**
     * Constructor de la clase Player. Inicializa las coordenadas, velocidad,
     * tamaño, estado de disparo y otras propiedades del jugador.
     */
	public Player() {

		// Set initial Coordinates
		x = GamePanel.WIDTH / 2;
		y = GamePanel.HEIGHT / 2;

		// Set Speed
		speed = 6;

		// Set Radius
		r = 25;

		// Set Default Firing
		firing = false;

		// Set Player Colors

		// set life
		lives = 7;

		// Firing Timer
		firingTimer = System.nanoTime();

		// Firing Delay Set
		firingDelay = 150;

		// set recovering
		recovering = false;

		// dead initialize
		dead = false;

		// score
		score = 0;

		try {
			playerImage = ImageIO.read(new File("src/res/goku.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}

		try {
			playerImage2 = ImageIO.read(new File("src/res/gokuhit.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}

	}


    /**
     * Obtiene la coordenada x del jugador.
     *
     * @return La coordenada x del jugador.
     */
    public int getx() {
        return x;
    }

    /**
     * Obtiene la coordenada y del jugador.
     *
     * @return La coordenada y del jugador.
     */
    public int gety() {
        return y;
    }

    /**
     * Obtiene el radio del jugador.
     *
     * @return El radio del jugador.
     */
    public int getr() {
        return r;
    }

    /**
     * Obtiene el número de vidas restantes del jugador.
     *
     * @return El número de vidas restantes del jugador.
     */
    public int getLives() {
        return lives;
    }

    /**
     * Obtiene la puntuación actual del jugador.
     *
     * @return La puntuación actual del jugador.
     */
    public int getScore() {
        return score;
    }

    /**
     * Obtiene el nivel actual de poder del jugador.
     *
     * @return El nivel actual de poder del jugador.
     */
    public int getPower() {
        return power;
    }

    /**
     * Obtiene el nivel de poder necesario para avanzar al siguiente nivel.
     *
     * @return El nivel de poder necesario para avanzar al siguiente nivel.
     */
    public int getPowerLevel() {
        return powerLevel;
    }

    /**
     * Obtiene el poder requerido para el nivel de poder actual del jugador.
     *
     * @return El poder requerido para el nivel de poder actual del jugador.
     */
    public int getRequiredPower() {
        return requiredPower[powerLevel];
    }

    /**
     * Establece la dirección hacia la izquierda del jugador.
     *
     * @param set true si la dirección hacia la izquierda está establecida, false
     *            de lo contrario.
     */
    public void setLeft(boolean set) {
        left = set;
    }

    /**
     * Establece la dirección hacia la derecha del jugador.
     *
     * @param set true si la dirección hacia la derecha está establecida, false de
     *            lo contrario.
     */
    public void setRight(boolean set) {
        right = set;
    }

    /**
     * Establece la dirección hacia arriba del jugador.
     *
     * @param set true si la dirección hacia arriba está establecida, false de lo
     *            contrario.
     */
    public void setUp(boolean set) {
        up = set;
    }

    /**
     * Establece la dirección hacia abajo del jugador.
     *
     * @param set true si la dirección hacia abajo está establecida, false de lo
     *            contrario.
     */
    public void setDown(boolean set) {
        down = set;
    }

    /**
     * Establece el estado de disparo del jugador.
     *
     * @param set true si el jugador está disparando, false de lo contrario.
     */
    public void setFiring(boolean set) {
        firing = set;
    }

    /**
     * Método que indica si el jugador está en proceso de recuperación.
     *
     * @return true si el jugador está en recuperación, false de lo contrario.
     */
    public boolean isRecovering() {
        return recovering;
    }

    /**
     * Método que indica si el jugador ha perdido todas sus vidas y está fuera del juego.
     *
     * @return true si el jugador está fuera del juego, false de lo contrario.
     */
    public boolean isOver() {
        return dead;
    }

    /**
     * Método que decrementa la cantidad de vidas del jugador. Si las vidas llegan a cero,
     * marca al jugador como muerto y en proceso de recuperación.
     */
    public void loseLife() {
        lives--;
        if (lives <= 0)
            dead = true;
        recovering = true;
        recoveryTimer = System.nanoTime();
    }

    /**
     * Método que incrementa la cantidad de vidas del jugador.
     * Si la cantidad de vidas alcanza el límite máximo (7), no se incrementa más.
     */
    public void addLife() {
        if (lives < 7) {
            lives++;
        }
    }

    /**
     * Método que incrementa el nivel de poder del jugador.
     * Si el nivel de poder alcanza el nivel requerido, se reinicia el nivel de poder y
     * se incrementa el nivel de poder actual.
     *
     * @param n La cantidad de poder que se va a añadir.
     */
    public void addPower(int n) {
        power += n;
        if (power >= requiredPower[powerLevel]) {
            power -= requiredPower[powerLevel];
            powerLevel++;
        }
    }

    /**
     * Método que incrementa la puntuación del jugador.
     *
     * @param n La cantidad de puntuación que se va a añadir.
     */
    public void addScore(int n) {
        score += n;
    }

    /**
     * Método que actualiza la posición y el estado del jugador en el juego.
     */
	public void update() {

		if (left)
			dx = -speed;
		if (right)
			dx = speed;
		if (up)
			dy = -speed;
		if (down)
			dy = speed;
		x += dx;
		y += dy;
		if (x < 2)
			x = 1;
		if (y < 2)
			y = 1;
		if (x > GamePanel.WIDTH - 2 * r - 3)
			x = GamePanel.WIDTH - 2 * r - 3;
		if (y > GamePanel.HEIGHT - 2 * r - 3)
			y = GamePanel.HEIGHT - 2 * r - 3;
		dx = 0;
		dy = 0;
		if (firing) {

			long elapsed = (System.nanoTime() - firingTimer) / 1000000;
			if (elapsed > firingDelay) {
				firingTimer = System.nanoTime();
				if (powerLevel < 2)
					GamePanel.bullets.add(new Bullet(270, x, y));
				else if (powerLevel < 4) {
					GamePanel.bullets.add(new Bullet(270, x + 5, y));
					GamePanel.bullets.add(new Bullet(270, x - 5, y));
				} else {
					GamePanel.bullets.add(new Bullet(270, x, y));
					GamePanel.bullets.add(new Bullet(280, x + 5, y));
					GamePanel.bullets.add(new Bullet(265, x - 5, y));
				}
			}
		}

		long elapsed = (System.nanoTime() - recoveryTimer) / 1000000;
		if (elapsed > 2000 && recovering) {
			recovering = false;
			recoveryTimer = 0;
		}

	}

	/**
     * Método que dibuja la representación visual del jugador en el panel del juego.
     *
     * @param g El contexto gráfico en el que se realiza el dibujo.
     */
	public void draw(Graphics2D g) {

		if (!recovering && !GamePanel.player.isOver()) {
			g.setStroke(new BasicStroke(2));
			g.drawImage(playerImage, x, y, 2 * r, 2 * r, null);
			g.setStroke(new BasicStroke(1));
		} else {
			long elapsed = (System.nanoTime() - switchTimer) / 1000000;
			if (elapsed > 50 || GamePanel.player.isOver()) {

				g.setStroke(new BasicStroke(3));
				g.drawImage(playerImage2, x, y, 2 * r, 2 * r, null);
				g.setStroke(new BasicStroke(1));
				switchTimer = System.nanoTime();

			}

		}

	}

}